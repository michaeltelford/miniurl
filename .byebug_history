c
@url.errors.any?
@url.save!
@url.external_empty?
@url
@url.errors.any?
n
c
Url.new.errors.any?
c
n
continue
n
c
n
external_empty?
step
help
down
@url.external_empty?
@url
n
@url
c
@url.external_empty?
@url
next
help
@url
c
var instance
var intance
var local
var
var --help
var help
help
local
locals
external
path
c
n
s
action
s
external
c
path
path = urls_path
urls_path
v local
path
next
step
next
integration_session
v local
step
help
help condition
condition help
v local
var local
var
where
help
post
external.strip
external == external.strip
external
c
s
c
external
s
external.strip!
external.strip
external
exit
clear
e
next
external
s
c
continue
e
next
external
step
exit
continue
external
continue
next
URI.valid?
URI(external)
external
continue
new_url_path
flash
continue
@url
next
continue
external
next
continue
url_params[:external]
prefix_protocol(url_params[:external])
@url
next
continue
url_params[:external]
@url
next
continue
help
step
help
in
Url.where(external: external).count
external
next
Url.all.each { |url| puts url.external }
Url.all.count
Url.all
continue
assigns :url
assigns
url_path
continue
value
next
value
next
url_params
@url
next
url_params[:external]
prefix_protocol(url_params[:external])
exit
continue
request.protocol
URI(request.original_url).port
URI(request.original_url).host
URI(request.original_url).methods.sort - Object.new.methods.sort
URI(request.original_url).methods
URI(request.original_url).protocol
URI(request.original_url).proto
URI(request.original_url).port
URI(request.original_url).host
URI(request.original_url)
request.original_url.class
request.original_url
url.start_with? PROTO
url
continue
@url
next
@url
continue
next
url
params[:internal_url]
continue
next
self.internal
self.internal?
continue
id
next
continue
next
step
continue
id
next
continue
where
continue
next
id
Url.where(internal: id).empty?
Url.where(internal: id)
continue
url.external
url.id
url.created_at
url.internal
url.external
url.respond_to? :external
url
next
params[:internal_url]
params[:internal_url
continue
restart
next
self.respond_to? :internal=
unique_id
continue
self.respond_to? :internal=
self.respond_to? :internal
continue
Url.respond_to? :internal
@url.respond_to? :internal
continue
self.class
value
target
help
next
internal
external
continue
@url
continue
next
continue
next
continue
@url
continue
@url.respond_to? :internal=
@url
continue
@url
next
@url
next
external
internal
next
next 2
@url
next 4
continue
next
@url
next
external_url
next
external_url
next
continue
url_params.is_a? Hash
url_params
url_params.class
continue
url_params[:external]
next 3
next3
url_params[:external]
continue
